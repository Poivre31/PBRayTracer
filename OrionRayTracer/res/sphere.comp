#version 460 core
struct Ray {
	vec3 origin;
	vec3 direction;
};

struct Transform {
	vec3 position;
	vec3 scale;
	vec2 rotation;
};

vec3 rotateSpherical(vec3 v, float theta, float phi);
vec3 rotateSphericalInv(vec3 v, float theta, float phi);
Ray transformRay(Ray ray, Transform transform);

float intersectSphere(Ray ray, Transform object) {
	float dirDotPos = dot(ray.direction, object.position - ray.origin);
	float d2 = dot(object.position - ray.origin,object.position - ray.origin);
	float radius = max(object.scale.x,max(object.scale.y,object.scale.z));
	if(dirDotPos * dirDotPos <= d2 - radius * radius) return -1.;
	ray = transformRay(ray,object);
	float a = dot(ray.direction, ray.direction);
	float b = dot(ray.origin, ray.direction);
	float c = dot(ray.origin, ray.origin) - 1.;
	
	float delta = b*b-a*c;
	return delta >= 0 ? (-b-sqrt(delta))/a : -1;
}

vec3 normalSphere(Ray ray, float intersectDistance, Transform transform) {
	vec3 intersect =  ray.origin + intersectDistance * ray.direction - transform.position;
	vec3 spherePos = rotateSphericalInv(intersect, transform.rotation.x, transform.rotation.y);
	vec3 normal = spherePos / (transform.scale * transform.scale);
	normal = rotateSpherical(normal, transform.rotation.x, transform.rotation.y);

	return normalize(normal);
}